schema {
  query: Query
  mutation: Mutation
  subscription: SubscriptionType
}

type Query {
  client(id: ID!): Client
  clients(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    order: [ClientSortInput!]
    where: ClientFilterInput
  ): ClientsConnection

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  subscriber(id: ID!): Subscriber
  subscribers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    order: [SubscriberSortInput!]
    where: SubscriberFilterInput
  ): SubscribersConnection
  totalClients: Int!
  totalSubscribers: Int!
  viewer: User
}

type Mutation {
  addSubscriber(input: AddSubscriberInput!): AddSubscriberPayload!
  deleteClient(input: DeleteClientInput!): DeleteClientPayload!
  deleteSubscriber(input: DeleteSubscriberInput!): DeleteSubscriberPayload!
  sendMessage(input: SendMessageInput!): SendMessagePayload!
  subscribeToClient(input: SubscribeToClientInput!): SubscribeToClientPayload!
  unsubscribeFromClient(
    input: UnsubscribeFromClientInput!
  ): UnsubscribeFromClientPayload!
}

type SubscriptionType {
  clientAdded: Client
  subscriberAdded: Subscriber
}

type AddSubscriberPayload {
  errors: [AddSubscriberError!]
  subscriber: Subscriber
}

type AlreadySubscribedError implements Error {
  message: String!
  phoneNumber: String!
}

type Announcement {
  client: Client
  clientId: UUID
  messageSid: String!
  sentOn: DateTime
}

type Client implements Node {
  announcements: [Announcement!]!
  customerId: String
  id: ID!
  joinedDate: DateTime
  locale: String!
  name: String!
  phoneNumber: String!
  slug: String!
  subscribeLink: String!
  subscriberCount: Int!
  subscribers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    order: [SubscriberSortInput!]
    where: SubscriberFilterInput
  ): SubscribersConnection
  subscription: StripeSubscription
  subscriptionId: String
}

type ClientNotFoundError implements Error {
  clientId: UUID!
  message: String!
}

"""
A connection to a list of items.
"""
type ClientsConnection {
  """
  A list of edges.
  """
  edges: [ClientsEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Client!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ClientsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Client!
}

type DeleteClientPayload {
  client: Client
  errors: [DeleteClientError!]
}

type DeleteSubscriberPayload {
  errors: [DeleteSubscriberError!]
  subscriber: Subscriber
}

type NotSubscribedError implements Error {
  message: String!
  phoneNumber: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type SendMessageFailed implements Error {
  message: String!
  sid: String
}

type SendMessagePayload {
  errors: [SendMessageError!]
  failed: Int
  sent: Int
}

type StripeSubscription {
  id: String
  status: String
}

type Subscriber implements Node {
  clients(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    order: [ClientSortInput!]
    where: ClientFilterInput
  ): ClientsConnection
  id: ID!
  joinedDate: DateTime
  locale: String!
  maskedPhone: String
  subscriptionCount: Int!
}

type SubscriberExistsError implements Error {
  message: String!
  phoneNumber: String!
}

type SubscriberNotFoundError implements Error {
  message: String!
  phoneNumber: String!
}

"""
A connection to a list of items.
"""
type SubscribersConnection {
  """
  A list of edges.
  """
  edges: [SubscribersEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [Subscriber!]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SubscribersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Subscriber!
}

type SubscribeToClientPayload {
  client: Client
  errors: [SubscribeToClientError!]
}

type UnsubscribeFromClientPayload {
  client: Client
  errors: [UnsubscribeFromClientError!]
}

type User {
  id: String!
}

interface Error {
  message: String!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

union AddSubscriberError = SubscriberExistsError

union DeleteClientError = ClientNotFoundError

union DeleteSubscriberError = SubscriberNotFoundError

union SendMessageError = SendMessageFailed

union SubscribeToClientError =
  | ClientNotFoundError
  | SubscriberNotFoundError
  | AlreadySubscribedError

union UnsubscribeFromClientError = ClientNotFoundError | NotSubscribedError

input AddSubscriberInput {
  locale: String!
  phoneNumber: String!
}

input AnnouncementFilterInput {
  and: [AnnouncementFilterInput!]
  client: ClientFilterInput
  clientId: UuidOperationFilterInput
  messageSid: StringOperationFilterInput
  or: [AnnouncementFilterInput!]
  sentOn: DateTimeOperationFilterInput
}

input ClientFilterInput {
  and: [ClientFilterInput!]
  announcements: ListFilterInputTypeOfAnnouncementFilterInput
  customerId: StringOperationFilterInput
  id: UuidOperationFilterInput
  joinedDate: DateTimeOperationFilterInput
  locale: StringOperationFilterInput
  name: StringOperationFilterInput
  or: [ClientFilterInput!]
  phoneNumber: StringOperationFilterInput
  slug: StringOperationFilterInput
  subscriberPhoneNumbers: ListFilterInputTypeOfSubscriberFilterInput
  subscriptionId: StringOperationFilterInput
}

input ClientSortInput {
  customerId: SortEnumType
  id: SortEnumType
  joinedDate: SortEnumType
  locale: SortEnumType
  name: SortEnumType
  phoneNumber: SortEnumType
  slug: SortEnumType
  subscriptionId: SortEnumType
}

input DateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime]
  nlt: DateTime
  nlte: DateTime
}

input DeleteClientInput {
  id: ID!
}

input DeleteSubscriberInput {
  id: ID!
}

input ListFilterInputTypeOfAnnouncementFilterInput {
  all: AnnouncementFilterInput
  any: Boolean
  none: AnnouncementFilterInput
  some: AnnouncementFilterInput
}

input ListFilterInputTypeOfClientFilterInput {
  all: ClientFilterInput
  any: Boolean
  none: ClientFilterInput
  some: ClientFilterInput
}

input ListFilterInputTypeOfSubscriberFilterInput {
  all: SubscriberFilterInput
  any: Boolean
  none: SubscriberFilterInput
  some: SubscriberFilterInput
}

input SendMessageInput {
  audience: Audience!
  message: String!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

input SubscriberFilterInput {
  and: [SubscriberFilterInput!]
  clients: ListFilterInputTypeOfClientFilterInput
  joinedDate: DateTimeOperationFilterInput
  locale: StringOperationFilterInput
  or: [SubscriberFilterInput!]
  phoneNumber: StringOperationFilterInput
}

input SubscriberSortInput {
  joinedDate: SortEnumType
  locale: SortEnumType
  phoneNumber: SortEnumType
}

input SubscribeToClientInput {
  clientId: ID!
  subscriberId: ID!
}

input UnsubscribeFromClientInput {
  clientId: ID!
  subscriberId: ID!
}

input UuidOperationFilterInput {
  eq: UUID
  gt: UUID
  gte: UUID
  in: [UUID]
  lt: UUID
  lte: UUID
  neq: UUID
  ngt: UUID
  ngte: UUID
  nin: [UUID]
  nlt: UUID
  nlte: UUID
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
  VALIDATION
}

enum Audience {
  ACTIVE_CLIENTS
  ACTIVE_CLIENTS_WITHOUT_SUBSCRIBERS
  ALL_CLIENTS
  EVERYONE
  SUBSCRIBERS
}

enum SortEnumType {
  ASC
  DESC
}

scalar UUID @specifiedBy(url: "https://tools.ietf.org/html/rfc4122")

"""
The `DateTime` scalar represents an ISO-8601 compliant date time type.
"""
scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")
