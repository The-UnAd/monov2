// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace UnAd.Data
{
    public partial class UserDbContextModel
    {
        partial void Initialize()
        {
            var clientSubscriber = ClientSubscriberEntityType.Create(this);
            var client = ClientEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var subscriber = SubscriberEntityType.Create(this);

            ClientSubscriberEntityType.CreateForeignKey1(clientSubscriber, client);
            ClientSubscriberEntityType.CreateForeignKey2(clientSubscriber, subscriber);

            ClientEntityType.CreateSkipNavigation1(client, subscriber, clientSubscriber);
            SubscriberEntityType.CreateSkipNavigation1(subscriber, client, clientSubscriber);

            ClientSubscriberEntityType.CreateAnnotations(clientSubscriber);
            ClientEntityType.CreateAnnotations(client);
            ProductEntityType.CreateAnnotations(product);
            SubscriberEntityType.CreateAnnotations(subscriber);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.2");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var clientSubscriber = FindEntityType("ClientSubscriber")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            clientSubscriber.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var clientSubscriberTableBase = new TableBase("ClientSubscriber", null, relationalModel);
            var client_idColumnBase = new ColumnBase<ColumnMappingBase>("client_id", "uuid", clientSubscriberTableBase);
            clientSubscriberTableBase.Columns.Add("client_id", client_idColumnBase);
            var subscriber_phone_numberColumnBase = new ColumnBase<ColumnMappingBase>("subscriber_phone_number", "character varying(15)", clientSubscriberTableBase);
            clientSubscriberTableBase.Columns.Add("subscriber_phone_number", subscriber_phone_numberColumnBase);
            relationalModel.DefaultTables.Add("ClientSubscriber", clientSubscriberTableBase);
            var clientSubscriberMappingBase = new TableMappingBase<ColumnMappingBase>(clientSubscriber, clientSubscriberTableBase, true);
            clientSubscriberTableBase.AddTypeMapping(clientSubscriberMappingBase, false);
            defaultTableMappings.Add(clientSubscriberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)client_idColumnBase, clientSubscriber.FindProperty("ClientId")!, clientSubscriberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)subscriber_phone_numberColumnBase, clientSubscriber.FindProperty("SubscriberPhoneNumber")!, clientSubscriberMappingBase);

            var tableMappings = new List<TableMapping>();
            clientSubscriber.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var client_subscriberTable = new Table("client_subscriber", null, relationalModel);
            var client_idColumn = new Column("client_id", "uuid", client_subscriberTable);
            client_subscriberTable.Columns.Add("client_id", client_idColumn);
            var subscriber_phone_numberColumn = new Column("subscriber_phone_number", "character varying(15)", client_subscriberTable);
            client_subscriberTable.Columns.Add("subscriber_phone_number", subscriber_phone_numberColumn);
            var client_subscriber_pkey = new UniqueConstraint("client_subscriber_pkey", client_subscriberTable, new[] { client_idColumn, subscriber_phone_numberColumn });
            client_subscriberTable.PrimaryKey = client_subscriber_pkey;
            var client_subscriber_pkeyUc = RelationalModel.GetKey(this,
                "ClientSubscriber",
                new[] { "ClientId", "SubscriberPhoneNumber" });
            client_subscriber_pkey.MappedKeys.Add(client_subscriber_pkeyUc);
            RelationalModel.GetOrCreateUniqueConstraints(client_subscriber_pkeyUc).Add(client_subscriber_pkey);
            client_subscriberTable.UniqueConstraints.Add("client_subscriber_pkey", client_subscriber_pkey);
            var iX_client_subscriber_subscriber_phone_number = new TableIndex(
            "IX_client_subscriber_subscriber_phone_number", client_subscriberTable, new[] { subscriber_phone_numberColumn }, false);
            var iX_client_subscriber_subscriber_phone_numberIx = RelationalModel.GetIndex(this,
                "ClientSubscriber",
                new[] { "SubscriberPhoneNumber" });
            iX_client_subscriber_subscriber_phone_number.MappedIndexes.Add(iX_client_subscriber_subscriber_phone_numberIx);
            RelationalModel.GetOrCreateTableIndexes(iX_client_subscriber_subscriber_phone_numberIx).Add(iX_client_subscriber_subscriber_phone_number);
            client_subscriberTable.Indexes.Add("IX_client_subscriber_subscriber_phone_number", iX_client_subscriber_subscriber_phone_number);
            relationalModel.Tables.Add(("client_subscriber", null), client_subscriberTable);
            var client_subscriberTableMapping = new TableMapping(clientSubscriber, client_subscriberTable, true);
            client_subscriberTable.AddTypeMapping(client_subscriberTableMapping, false);
            tableMappings.Add(client_subscriberTableMapping);
            RelationalModel.CreateColumnMapping(client_idColumn, clientSubscriber.FindProperty("ClientId")!, client_subscriberTableMapping);
            RelationalModel.CreateColumnMapping(subscriber_phone_numberColumn, clientSubscriber.FindProperty("SubscriberPhoneNumber")!, client_subscriberTableMapping);

            var client = FindEntityType("UnAd.Data.Users.Models.Client")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            client.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var unAdDataUsersModelsClientTableBase = new TableBase("UnAd.Data.Users.Models.Client", null, relationalModel);
            var customer_idColumnBase = new ColumnBase<ColumnMappingBase>("customer_id", "character varying", unAdDataUsersModelsClientTableBase)
            {
                IsNullable = true
            };
            unAdDataUsersModelsClientTableBase.Columns.Add("customer_id", customer_idColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", unAdDataUsersModelsClientTableBase);
            unAdDataUsersModelsClientTableBase.Columns.Add("id", idColumnBase);
            var localeColumnBase = new ColumnBase<ColumnMappingBase>("locale", "character varying(5)", unAdDataUsersModelsClientTableBase);
            unAdDataUsersModelsClientTableBase.Columns.Add("locale", localeColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying", unAdDataUsersModelsClientTableBase);
            unAdDataUsersModelsClientTableBase.Columns.Add("name", nameColumnBase);
            var phone_numberColumnBase = new ColumnBase<ColumnMappingBase>("phone_number", "character varying(15)", unAdDataUsersModelsClientTableBase);
            unAdDataUsersModelsClientTableBase.Columns.Add("phone_number", phone_numberColumnBase);
            var subscription_idColumnBase = new ColumnBase<ColumnMappingBase>("subscription_id", "character varying", unAdDataUsersModelsClientTableBase)
            {
                IsNullable = true
            };
            unAdDataUsersModelsClientTableBase.Columns.Add("subscription_id", subscription_idColumnBase);
            relationalModel.DefaultTables.Add("UnAd.Data.Users.Models.Client", unAdDataUsersModelsClientTableBase);
            var unAdDataUsersModelsClientMappingBase = new TableMappingBase<ColumnMappingBase>(client, unAdDataUsersModelsClientTableBase, true);
            unAdDataUsersModelsClientTableBase.AddTypeMapping(unAdDataUsersModelsClientMappingBase, false);
            defaultTableMappings0.Add(unAdDataUsersModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, client.FindProperty("Id")!, unAdDataUsersModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customer_idColumnBase, client.FindProperty("CustomerId")!, unAdDataUsersModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)localeColumnBase, client.FindProperty("Locale")!, unAdDataUsersModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, client.FindProperty("Name")!, unAdDataUsersModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_numberColumnBase, client.FindProperty("PhoneNumber")!, unAdDataUsersModelsClientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)subscription_idColumnBase, client.FindProperty("SubscriptionId")!, unAdDataUsersModelsClientMappingBase);

            var tableMappings0 = new List<TableMapping>();
            client.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var clientTable = new Table("client", null, relationalModel);
            var idColumn = new Column("id", "uuid", clientTable);
            clientTable.Columns.Add("id", idColumn);
            var customer_idColumn = new Column("customer_id", "character varying", clientTable)
            {
                IsNullable = true
            };
            clientTable.Columns.Add("customer_id", customer_idColumn);
            var localeColumn = new Column("locale", "character varying(5)", clientTable);
            clientTable.Columns.Add("locale", localeColumn);
            var nameColumn = new Column("name", "character varying", clientTable);
            clientTable.Columns.Add("name", nameColumn);
            var phone_numberColumn = new Column("phone_number", "character varying(15)", clientTable);
            clientTable.Columns.Add("phone_number", phone_numberColumn);
            var subscription_idColumn = new Column("subscription_id", "character varying", clientTable)
            {
                IsNullable = true
            };
            clientTable.Columns.Add("subscription_id", subscription_idColumn);
            var client_pkey = new UniqueConstraint("client_pkey", clientTable, new[] { idColumn });
            clientTable.PrimaryKey = client_pkey;
            var client_pkeyUc = RelationalModel.GetKey(this,
                "UnAd.Data.Users.Models.Client",
                new[] { "Id" });
            client_pkey.MappedKeys.Add(client_pkeyUc);
            RelationalModel.GetOrCreateUniqueConstraints(client_pkeyUc).Add(client_pkey);
            clientTable.UniqueConstraints.Add("client_pkey", client_pkey);
            var client_phone_number_key = new TableIndex(
            "client_phone_number_key", clientTable, new[] { phone_numberColumn }, true);
            var client_phone_number_keyIx = RelationalModel.GetIndex(this,
                "UnAd.Data.Users.Models.Client",
                "client_phone_number_key");
            client_phone_number_key.MappedIndexes.Add(client_phone_number_keyIx);
            RelationalModel.GetOrCreateTableIndexes(client_phone_number_keyIx).Add(client_phone_number_key);
            clientTable.Indexes.Add("client_phone_number_key", client_phone_number_key);
            var idx_client_phone_number = new TableIndex(
            "idx_client_phone_number", clientTable, new[] { phone_numberColumn }, false);
            var idx_client_phone_numberIx = RelationalModel.GetIndex(this,
                "UnAd.Data.Users.Models.Client",
                "idx_client_phone_number");
            idx_client_phone_number.MappedIndexes.Add(idx_client_phone_numberIx);
            RelationalModel.GetOrCreateTableIndexes(idx_client_phone_numberIx).Add(idx_client_phone_number);
            clientTable.Indexes.Add("idx_client_phone_number", idx_client_phone_number);
            relationalModel.Tables.Add(("client", null), clientTable);
            var clientTableMapping = new TableMapping(client, clientTable, true);
            clientTable.AddTypeMapping(clientTableMapping, false);
            tableMappings0.Add(clientTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, client.FindProperty("Id")!, clientTableMapping);
            RelationalModel.CreateColumnMapping(customer_idColumn, client.FindProperty("CustomerId")!, clientTableMapping);
            RelationalModel.CreateColumnMapping(localeColumn, client.FindProperty("Locale")!, clientTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, client.FindProperty("Name")!, clientTableMapping);
            RelationalModel.CreateColumnMapping(phone_numberColumn, client.FindProperty("PhoneNumber")!, clientTableMapping);
            RelationalModel.CreateColumnMapping(subscription_idColumn, client.FindProperty("SubscriptionId")!, clientTableMapping);

            var product = FindEntityType("UnAd.Data.Users.Models.Product")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var unAdDataUsersModelsProductTableBase = new TableBase("UnAd.Data.Users.Models.Product", null, relationalModel);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("description", "text", unAdDataUsersModelsProductTableBase)
            {
                IsNullable = true
            };
            unAdDataUsersModelsProductTableBase.Columns.Add("description", descriptionColumnBase);
            var product_idColumnBase = new ColumnBase<ColumnMappingBase>("product_id", "character varying", unAdDataUsersModelsProductTableBase);
            unAdDataUsersModelsProductTableBase.Columns.Add("product_id", product_idColumnBase);
            relationalModel.DefaultTables.Add("UnAd.Data.Users.Models.Product", unAdDataUsersModelsProductTableBase);
            var unAdDataUsersModelsProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, unAdDataUsersModelsProductTableBase, true);
            unAdDataUsersModelsProductTableBase.AddTypeMapping(unAdDataUsersModelsProductMappingBase, false);
            defaultTableMappings1.Add(unAdDataUsersModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase, product.FindProperty("ProductId")!, unAdDataUsersModelsProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, product.FindProperty("Description")!, unAdDataUsersModelsProductMappingBase);

            var tableMappings1 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var productTable = new Table("product", null, relationalModel);
            var product_idColumn = new Column("product_id", "character varying", productTable);
            productTable.Columns.Add("product_id", product_idColumn);
            var descriptionColumn = new Column("description", "text", productTable)
            {
                IsNullable = true
            };
            productTable.Columns.Add("description", descriptionColumn);
            var product_pkey = new UniqueConstraint("product_pkey", productTable, new[] { product_idColumn });
            productTable.PrimaryKey = product_pkey;
            var product_pkeyUc = RelationalModel.GetKey(this,
                "UnAd.Data.Users.Models.Product",
                new[] { "ProductId" });
            product_pkey.MappedKeys.Add(product_pkeyUc);
            RelationalModel.GetOrCreateUniqueConstraints(product_pkeyUc).Add(product_pkey);
            productTable.UniqueConstraints.Add("product_pkey", product_pkey);
            relationalModel.Tables.Add(("product", null), productTable);
            var productTableMapping = new TableMapping(product, productTable, true);
            productTable.AddTypeMapping(productTableMapping, false);
            tableMappings1.Add(productTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn, product.FindProperty("ProductId")!, productTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, product.FindProperty("Description")!, productTableMapping);

            var subscriber = FindEntityType("UnAd.Data.Users.Models.Subscriber")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            subscriber.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var unAdDataUsersModelsSubscriberTableBase = new TableBase("UnAd.Data.Users.Models.Subscriber", null, relationalModel);
            var joined_dateColumnBase = new ColumnBase<ColumnMappingBase>("joined_date", "timestamp with time zone", unAdDataUsersModelsSubscriberTableBase)
            {
                IsNullable = true
            };
            unAdDataUsersModelsSubscriberTableBase.Columns.Add("joined_date", joined_dateColumnBase);
            var phone_numberColumnBase0 = new ColumnBase<ColumnMappingBase>("phone_number", "character varying(15)", unAdDataUsersModelsSubscriberTableBase);
            unAdDataUsersModelsSubscriberTableBase.Columns.Add("phone_number", phone_numberColumnBase0);
            relationalModel.DefaultTables.Add("UnAd.Data.Users.Models.Subscriber", unAdDataUsersModelsSubscriberTableBase);
            var unAdDataUsersModelsSubscriberMappingBase = new TableMappingBase<ColumnMappingBase>(subscriber, unAdDataUsersModelsSubscriberTableBase, true);
            unAdDataUsersModelsSubscriberTableBase.AddTypeMapping(unAdDataUsersModelsSubscriberMappingBase, false);
            defaultTableMappings2.Add(unAdDataUsersModelsSubscriberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phone_numberColumnBase0, subscriber.FindProperty("PhoneNumber")!, unAdDataUsersModelsSubscriberMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)joined_dateColumnBase, subscriber.FindProperty("JoinedDate")!, unAdDataUsersModelsSubscriberMappingBase);

            var tableMappings2 = new List<TableMapping>();
            subscriber.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var subscriberTable = new Table("subscriber", null, relationalModel);
            var phone_numberColumn0 = new Column("phone_number", "character varying(15)", subscriberTable);
            subscriberTable.Columns.Add("phone_number", phone_numberColumn0);
            var joined_dateColumn = new Column("joined_date", "timestamp with time zone", subscriberTable)
            {
                IsNullable = true
            };
            subscriberTable.Columns.Add("joined_date", joined_dateColumn);
            var subscriber_pkey = new UniqueConstraint("subscriber_pkey", subscriberTable, new[] { phone_numberColumn0 });
            subscriberTable.PrimaryKey = subscriber_pkey;
            var subscriber_pkeyUc = RelationalModel.GetKey(this,
                "UnAd.Data.Users.Models.Subscriber",
                new[] { "PhoneNumber" });
            subscriber_pkey.MappedKeys.Add(subscriber_pkeyUc);
            RelationalModel.GetOrCreateUniqueConstraints(subscriber_pkeyUc).Add(subscriber_pkey);
            subscriberTable.UniqueConstraints.Add("subscriber_pkey", subscriber_pkey);
            relationalModel.Tables.Add(("subscriber", null), subscriberTable);
            var subscriberTableMapping = new TableMapping(subscriber, subscriberTable, true);
            subscriberTable.AddTypeMapping(subscriberTableMapping, false);
            tableMappings2.Add(subscriberTableMapping);
            RelationalModel.CreateColumnMapping(phone_numberColumn0, subscriber.FindProperty("PhoneNumber")!, subscriberTableMapping);
            RelationalModel.CreateColumnMapping(joined_dateColumn, subscriber.FindProperty("JoinedDate")!, subscriberTableMapping);
            var client_subscriber_client_id_fkey = new ForeignKeyConstraint(
                "client_subscriber_client_id_fkey", client_subscriberTable, clientTable,
                new[] { client_idColumn },
                clientTable.FindUniqueConstraint("client_pkey")!, ReferentialAction.Cascade);
            var client_subscriber_client_id_fkeyFk = RelationalModel.GetForeignKey(this,
                "ClientSubscriber",
                new[] { "ClientId" },
                "UnAd.Data.Users.Models.Client",
                new[] { "Id" });
            client_subscriber_client_id_fkey.MappedForeignKeys.Add(client_subscriber_client_id_fkeyFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(client_subscriber_client_id_fkeyFk).Add(client_subscriber_client_id_fkey);
            client_subscriberTable.ForeignKeyConstraints.Add(client_subscriber_client_id_fkey);
            clientTable.ReferencingForeignKeyConstraints.Add(client_subscriber_client_id_fkey);
            var client_subscriber_subscriber_phone_number_fkey = new ForeignKeyConstraint(
                "client_subscriber_subscriber_phone_number_fkey", client_subscriberTable, subscriberTable,
                new[] { subscriber_phone_numberColumn },
                subscriberTable.FindUniqueConstraint("subscriber_pkey")!, ReferentialAction.Cascade);
            var client_subscriber_subscriber_phone_number_fkeyFk = RelationalModel.GetForeignKey(this,
                "ClientSubscriber",
                new[] { "SubscriberPhoneNumber" },
                "UnAd.Data.Users.Models.Subscriber",
                new[] { "PhoneNumber" });
            client_subscriber_subscriber_phone_number_fkey.MappedForeignKeys.Add(client_subscriber_subscriber_phone_number_fkeyFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(client_subscriber_subscriber_phone_number_fkeyFk).Add(client_subscriber_subscriber_phone_number_fkey);
            client_subscriberTable.ForeignKeyConstraints.Add(client_subscriber_subscriber_phone_number_fkey);
            subscriberTable.ReferencingForeignKeyConstraints.Add(client_subscriber_subscriber_phone_number_fkey);
            return relationalModel.MakeReadOnly();
        }
    }
}
